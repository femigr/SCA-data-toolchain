pipeline {
    agent {
        docker { 
            image 'scadatatoolchain:latest' 
            args '-u root:sudo'
        }
    }
    parameters {
        string(name: 'PACKAGE_NAME', defaultValue: 'openssl', description: 'Name of the package to be scanned');
        string(name: 'LANGUAGE', defaultValue: 'cpp', description: 'The programming language');
    }
    options {
        timeout(time: 15, unit: 'MINUTES', activity: true)
    }
    stages {
        stage('CodeQL') {
            stages{
                stage('Get Repository') { 
                    steps {
                        deleteDir()
                        dir('sources'){
                            sh 'apt source $PACKAGE_NAME'
                            sh 'ls'
                        }
                    }
                }
                stage('Get Dependencies') {
                    steps {
                        sh 'apt build-dep ${PACKAGE_NAME} -y'
                    }
                }
                stage('Build CodeQL Database'){
                    steps{
                        dir('sources'){
                            script{
                                sh '''
                                    cd *
                                    codeql database create --language=${LANGUAGE} codeQlDb --command="debuild -b -uc -us" --overwrite
                                '''
                            }
                        }
                    }
                }
                stage('Run CodeQL Queries'){
                    steps{
                        sh 'codeql database analyze --format=sarif-latest --output=codeQlScan.sarif codeQlDb cpp-lgtm-full.qls'
                        archiveArtifacts artifacts: '**/*.sarif', defaultExcludes: false
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
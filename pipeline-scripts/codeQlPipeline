pipeline {
    agent any
    parameters {
        string(name: 'PACKAGE_NAME', defaultValue: 'openssl', description: 'Name of the package to be scanned');
        string(name: 'LANGUAGE', defaultValue: 'cpp', description: 'The programming language');
    }
    options {
        timeout(time: 15, unit: 'MINUTES', activity: true)
    }
    stages {
        stage('Prepare Dockerfile') {
            steps {
                sh 'echo "\nRUN apt-get build-dep ${PACKAGE_NAME} -y" >> Dockerfile'
            }
        }
        stage('Scan') {
            agent { dockerfile {reuseNode true} }
            stages{
                stage('Get Source Package') {
                    steps {
                        dir('sources') {
                            sh 'apt source $PACKAGE_NAME'
                        }
                    }
                }
                stage('CodeQl') {
                    stages{
                        stage('Build CodeQL Database'){
                            steps{
                                dir('sources'){
                                    script{
                                        sh '''
                                            ls -a
                                            cd *
                                            codeql database create --language=${LANGUAGE} codeQlDb --command="debuild -b -uc -us" --overwrite
                                        '''
                                    }
                                }
                            }
                        }
                        stage('Run CodeQL Queries'){
                            steps{
                                dir('sources'){
                                    sh '''
                                        cd `find ./ -name 'codeQlDb'`/..
                                        codeql database analyze --ram=1024 --format=sarif-latest --output=${PACKAGE_NAME}.sarif codeQlDb cpp-lgtm-full.qls
                                    '''
                                    archiveArtifacts artifacts: '**/*.sarif', defaultExcludes: false
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
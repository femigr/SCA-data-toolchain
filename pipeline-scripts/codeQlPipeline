pipeline {
    agent any 
    parameters {
        string(name: 'PACKAGE_NAME', defaultValue: 'openssl', description: 'Name of the package to be scanned');
        string(name: 'LANGUAGE', defaultValue: 'cpp', description: 'The programming language');
    }
    options {
        timeout(time: 15, unit: 'MINUTES', activity: true)
    }
    stages {
        stage('CodeQL') {
            agent {
                docker { image 'scadatatoolchain:latest' }
            }
            stages{
                stage('Get Repository') { 
                    steps {
                        sh 'apt source $PACKAGE_NAME'
                        sh 'ls'
                    }
                }
                stage('Build CodeQL Database'){
                    steps{
                        dir("${PACKAGE_NAME}*/"){
                            script{
                                sh 'ls'
                                command = 'codeql database create --language=' + env.LANGUAGE + ' codeQlDb --command="debuild -b -uc -us"'
                                sh command
                            }
                        }
                    }
                }
                stage('Run CodeQL Queries'){
                    steps{
                        sh 'codeql database analyze --format=sarif-latest --output=codeQlScan.sarif codeQlDb cpp-lgtm-full.qls'
                        archiveArtifacts artifacts: '**/*.sarif', defaultExcludes: false
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
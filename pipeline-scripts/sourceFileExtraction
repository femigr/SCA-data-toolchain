def archiveSourceFiles(Map params = [
            package_name: "",
            fileslist: "files.txt", 
            ssh_credentials_id: "ssh_credentials",
            data_dir: 'sca-data',
            ssh_host: 'localhost',
            state: 'old' // old or new
        ]) {
    script { 
        echo params.toString()

        files = readFile(params.fileslist).split("\n")
        echo files.toString()

        withCredentials(bindings: [sshUserPrivateKey(credentialsId: params.ssh_credentials_id, \
                                            keyFileVariable: 'SSH_KEY', \
                                            passphraseVariable: '', \
                                            usernameVariable: 'SSH_USER')]) {
                    
            // create a directory:
            sh 'ssh -i ${SSH_KEY} ${SSH_USER}@' + params.ssh_host + ' "mkdir -p ' + params.data_dir + '/' + params.package_name + '/source/' + params.state + '"'

            // use scp to push the artifacts
            dir(params.state + '/' + params.package_name){ 
                for(file in files) {
                    try{
                        sh 'rsync -R -e "ssh -i ${SSH_KEY}" ' + file + ' ${SSH_USER}@' + params.ssh_host + ':' + params.data_dir + '/' + params.package_name + '/source/' + params.state + '/'
                    } catch(e) {
                        echo 'error: ' + e.toString()
                    }
                }
            }
        }
    }
}

pipeline {
    agent any
    parameters {
        string(name: 'PACKAGE_NAME', defaultValue: 'rolldice', description: 'Name of the package to be scanned');
    }
    environment {
        SSH_CREDENTIALS_ID = 'ssh_credentials';
        DATA_DIR = 'sca-data';
        SSH_HOST = 'localhost';

        OLD_IMAGE_TAG = "precise-20151028"
        NEW_IMAGE_TAG = "xenial-20210804"

        CODEQL_REPORT_NAME = "${PACKAGE_NAME}_${UBUNTU_VERSION}.sarif";
        CPPCHECK_REPORT_NAME = "${PACKAGE_NAME}_${UBUNTU_VERSION}.xml";
    }
    options {
        timeout(time: 180, unit: 'MINUTES', activity: false);
        parallelsAlwaysFailFast();
    }
    stages {
        stage('Retrieve result files') {
            steps{
                withCredentials(bindings: [sshUserPrivateKey(credentialsId: env.SSH_CREDENTIALS_ID, \
                                            keyFileVariable: 'SSH_KEY', \
                                            passphraseVariable: '', \
                                            usernameVariable: 'SSH_USER')]) {
                    
                    // get the results:
                    sh 'mkdir -p ${WORKSPACE}/results/${PACKAGE_NAME}'
                    sh 'scp -r -i ${SSH_KEY} ${SSH_USER}@${SSH_HOST}:${DATA_DIR}/${PACKAGE_NAME} ${WORKSPACE}/results/${PACKAGE_NAME}'
                    dir("${WORKSPACE}/results/") {
                        sh 'ls -a -R'
                    }
                    sh "python3 -m sca_data_processing get_src_paths ${WORKSPACE}/results/${PACKAGE_NAME} > files.txt"
                }
            }
        }
        stage('Retrieve source files') {
            parallel{
                stage('Old') {
                    stages{
                        stage('Get Source') {
                            agent { dockerfile {
                                filename 'Dockerfile'
                                reuseNode true
                                additionalBuildArgs '--build-arg VERSION=${OLD_IMAGE_TAG}'
                            } }
                            steps{
                                sh 'lsb_release -a'
                                dir('old') {
                                    sh 'apt-get source $PACKAGE_NAME'
                                }
                            }
                        }
                        stage('Archiving') {
                            steps{
                                sh 'ls'
                                dir('old') {
                                    sh "mv \$(ls -l | grep -e '^d' | awk '{print \$9}') ${PACKAGE_NAME}"
                                    sh 'ls'
                                }
                                archiveSourceFiles package_name: env.PACKAGE_NAME, state: 'old', fileslist: "files.txt", ssh_credentials_id: "ssh_credentials", data_dir: 'sca-data', ssh_host: 'localhost'
                            }

                        }
                    }
                }
                stage('New') {
                    stages{
                        stage('Get Source') {
                            agent { dockerfile {
                                filename 'Dockerfile'
                                reuseNode true
                                additionalBuildArgs '--build-arg VERSION=${NEW_IMAGE_TAG}'
                            } }
                            steps{
                                sh 'lsb_release -a'
                                dir('new'){
                                    sh 'apt-get source $PACKAGE_NAME'
                                }
                            }
                        }
                        stage('Archiving') {
                            steps{
                                sh 'ls'
                                dir('new'){
                                    sh "mv \$(ls -l | grep -e '^d' | awk '{print \$9}') ${PACKAGE_NAME}"
                                    sh 'ls'
                                }
                                archiveSourceFiles package_name: env.PACKAGE_NAME, state: 'new', fileslist: "files.txt", ssh_credentials_id: "ssh_credentials", data_dir: 'sca-data', ssh_host: 'localhost'
                            }
                        }
                    }
                }
            }           
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
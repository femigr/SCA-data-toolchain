pipeline {
    agent any
    parameters {
        string(name: 'PACKAGE_NAME', defaultValue: 'rolldice', description: 'Name of the package to be scanned');
        choice(name: 'UBUNTU_VERSION', choices: ['12_04', '21_04'], description: '');
    }
    environment {
        SSH_CREDENTIALS_ID = 'ssh_credentials';
        DATA_DIR = 'sca-data';
        CACHE_DIR = 'cache';
        SSH_HOST = 'localhost';
        CODEQL_REPORT_NAME = "${PACKAGE_NAME}_${UBUNTU_VERSION}.sarif";
        CPPCHECK_REPORT_NAME = "${PACKAGE_NAME}_${UBUNTU_VERSION}.xml";
    }
    options {
        timeout(time: 180, unit: 'MINUTES', activity: false);
        parallelsAlwaysFailFast();
    }
    stages {
        stage('Prepare Dockerfile') {
            steps {
                script{
                    if(env.UBUNTU_VERSION == '12_04'){
                        env.IMAGE_TAG = "precise-20151028"
                        echo 'Version set to 12_04'
                    }
                    if(env.UBUNTU_VERSION == '21_04'){
                        env.IMAGE_TAG = "xenial-20210804"
                        echo 'Version set to 21_04'
                    }
                }
                sh 'cp Dockerfile Dockerfile_codeql'
                sh '''
                echo "\nRUN apt-get build-dep ${PACKAGE_NAME} -y" >> Dockerfile_codeql
                echo "\nRUN apt-get source ${PACKAGE_NAME}" >> Dockerfile_codeql
                echo "\nRUN mv \\\$(ls -l | grep -e '^d' | awk '{print \\\$9}') scadatasource" >> Dockerfile_codeql
                echo "\nRUN cd scadatasource && codeql database create --language=cpp codeQlDb --command='debuild -b -uc -us' --overwrite && codeql database analyze --ram=2048 --format=sarif-latest --output=${CODEQL_REPORT_NAME} codeQlDb cpp-lgtm-full.qls" >> Dockerfile_codeql
                echo "\nADD tools/cppcheck-2.5/ /opt/cppcheck/" >> Dockerfile
                '''
            }
        }
        stage('Scans') {
            parallel{
                stage('CodeQl') {
                    agent { dockerfile {
                        filename 'Dockerfile_codeql'
                        reuseNode true
                        args '-u root:root'
                        additionalBuildArgs '--build-arg VERSION=${IMAGE_TAG}'
                    } }
                    steps{
                        sh 'lsb_release -a'
                        sh 'cd /stuff/sources/scadatasource && cp ${CODEQL_REPORT_NAME} ${WORKSPACE}'
                        sh 'ls -a'
                        archiveArtifacts artifacts: '**/*.sarif', defaultExcludes: false 
                    }
                }
                stage('cppcheck') {
                    stages{
                        stage('Setup') {
                            steps{
                                script{
                                    try{
                                        withCredentials(bindings: [sshUserPrivateKey(credentialsId: env.SSH_CREDENTIALS_ID, \
                                            keyFileVariable: 'SSH_KEY', \
                                            passphraseVariable: '', \
                                            usernameVariable: 'SSH_USER')]) {

                                            // getting cppcheck from cache
                                            sh 'mkdir -p tools'
                                            sh 'scp -r -i ${SSH_KEY} ${SSH_USER}@${SSH_HOST}:${CACHE_DIR}/cppcheck-2.5 ${WORKSPACE}/tools/'
                                            echo 'Retrieved cppcheck from cache'
                                        }
                                    }
                                    catch(err){
                                        dir('tools'){
                                            echo 'Building cppcheck'
                                            sh 'wget -q https://github.com/danmar/cppcheck/archive/2.5.tar.gz'
                                            sh 'tar -xvzf 2.5.tar.gz'
                                            dir('cppcheck-2.5'){
                                                sh 'g++ -o cppcheck -std=c++11 -Iexternals -Iexternals/simplecpp -Iexternals/tinyxml2 -Iexternals/picojson -Ilib cli/*.cpp lib/*.cpp externals/simplecpp/simplecpp.cpp externals/tinyxml2/*.cpp -static -O3'
                                            }

                                            //storing the build for caching purposes
                                            withCredentials(bindings: [sshUserPrivateKey(credentialsId: env.SSH_CREDENTIALS_ID, \
                                                keyFileVariable: 'SSH_KEY', \
                                                passphraseVariable: '', \
                                                usernameVariable: 'SSH_USER')]) {
                                            // create a directory:
                                                sh 'ssh -i ${SSH_KEY} ${SSH_USER}@${SSH_HOST} "mkdir -p ${CACHE_DIR}"'
    
                                                //store the folder
                                                sh 'scp -r -i ${SSH_KEY} cppcheck-2.5 ${SSH_USER}@${SSH_HOST}:${CACHE_DIR}'
                                            }
                                            echo 'Stored cppcheck for future builds'
                                        }
                                    }
                                }
                            }
                        }
                        stage('Scan') {
                            agent { dockerfile {
                                filename 'Dockerfile'
                                reuseNode true
                                additionalBuildArgs '--build-arg VERSION=${IMAGE_TAG}'
                            } }
                            steps{
                                sh 'lsb_release -a'
                                dir('cppcheck') {
                                    sh 'apt-get source $PACKAGE_NAME'
                                    sh '/opt/cppcheck/cppcheck --xml ./ 2> ${CPPCHECK_REPORT_NAME}'
                                    
                                    sh "apt-cache show ${PACKAGE_NAME} | sed -n -e 's/^.*Version: //p' >> ${PACKAGE_NAME}_${UBUNTU_VERSION}_version.txt"

                                    archiveArtifacts artifacts: '*.xml', defaultExcludes: false
                                    archiveArtifacts artifacts: "${PACKAGE_NAME}_${UBUNTU_VERSION}_version.txt", defaultExcludes: false
                                }
                            }
                        }
                    }
                    
                }
            }           
        }
        stage('Publish Results') {
            steps{
                withCredentials(bindings: [sshUserPrivateKey(credentialsId: env.SSH_CREDENTIALS_ID, \
                                            keyFileVariable: 'SSH_KEY', \
                                            passphraseVariable: '', \
                                            usernameVariable: 'SSH_USER')]) {
                    
                    // create a directory:
                    sh 'ssh -i ${SSH_KEY} ${SSH_USER}@${SSH_HOST} "mkdir -p ${DATA_DIR}/${PACKAGE_NAME}"'

                    // use scp to push the artifacts
                    sh 'scp -i ${SSH_KEY} ${CODEQL_REPORT_NAME} ${SSH_USER}@${SSH_HOST}:${DATA_DIR}/${PACKAGE_NAME}/${CODEQL_REPORT_NAME}'
                    sh 'scp -i ${SSH_KEY} cppcheck/${CPPCHECK_REPORT_NAME} ${SSH_USER}@${SSH_HOST}:${DATA_DIR}/${PACKAGE_NAME}/${CPPCHECK_REPORT_NAME}'
                    sh 'scp -i ${SSH_KEY} cppcheck/${PACKAGE_NAME}_${UBUNTU_VERSION}_version.txt ${SSH_USER}@${SSH_HOST}:${DATA_DIR}/${PACKAGE_NAME}/${PACKAGE_NAME}_${UBUNTU_VERSION}_version.txt'
                }
            }
        }     
    }
    post {
        always {
            deleteDir()
        }
    }
}
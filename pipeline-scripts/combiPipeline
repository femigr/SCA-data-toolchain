pipeline {
    agent any
    parameters {
        string(name: 'PACKAGE_NAME', defaultValue: 'rolldice', description: 'Name of the package to be scanned');
        string(name: 'LANGUAGE', defaultValue: 'cpp', description: 'The programming language');
        choice(name: 'UBUNTU_VERSION', choices: ['12_04', '21_04'], description: '');
    }
    options {
        timeout(time: 30, unit: 'MINUTES', activity: true)
    }
    stages {
        stage('Prepare Dockerfile') {
            steps {
                script{
                    if(env.UBUNTU_VERSION == '12_04'){
                        env.IMAGE_TAG = "precise-20151028"
                        echo 'Version set to 12_04'
                    }
                    if(env.UBUNTU_VERSION == '21_04'){
                        env.IMAGE_TAG = "xenial-20210804"
                        echo 'Version set to 21_04'
                    }
                }
                sh 'cp Dockerfile Dockerfile_codeql'
                sh '''
                echo "\nRUN apt-get build-dep ${PACKAGE_NAME} -y" >> Dockerfile_codeql
                echo "\nRUN apt-get source ${PACKAGE_NAME}" >> Dockerfile_codeql
                echo "\nRUN mv \\\$(ls -l | grep -e '^d' | awk '{print \\\$9}') scadatasource" >> Dockerfile_codeql
                echo "\nRUN cd scadatasource && codeql database create --language=${LANGUAGE} codeQlDb --command='debuild -b -uc -us' --overwrite && codeql database analyze --ram=1024 --format=sarif-latest --output=${PACKAGE_NAME}_${UBUNTU_VERSION}.sarif codeQlDb cpp-lgtm-full.qls" >> Dockerfile_codeql
                '''
            }
        }
        stage('Scans') {
            parallel{
                stage('CodeQl') {
                    agent { dockerfile {
                        filename 'Dockerfile_codeql'
                        reuseNode true
                        args '-u root:root'
                        additionalBuildArgs '--build-arg VERSION=${IMAGE_TAG}'
                    } }
                    steps{
                        sh 'lsb_release -a'
                        sh 'cd /stuff/sources/scadatasource && cp ${PACKAGE_NAME}_${UBUNTU_VERSION}.sarif ${WORKSPACE}'
                        sh 'ls -a'
                        archiveArtifacts artifacts: '**/*.sarif', defaultExcludes: false 

                        /*dir('sources'){
                            script{
                                sh '''
                                    ls -a
                                    cd *
                                    codeql database create --language=${LANGUAGE} codeQlDb --command="debuild -b -uc -us" --overwrite
                                    codeql database analyze --ram=1024 --format=sarif-latest --output=${PACKAGE_NAME}.sarif codeQlDb cpp-lgtm-full.qls
                                '''
                            }
                        }*/
                    }
                }
                stage('cppcheck') {
                    agent { dockerfile {
                        filename 'Dockerfile'
                        reuseNode true
                        additionalBuildArgs '--build-arg VERSION=${IMAGE_TAG}'
                    } }
                    steps{
                        sh 'lsb_release -a'
                        dir('cppcheck') {
                            sh 'apt-get source $PACKAGE_NAME'
                            sh 'cppcheck --xml ./ 2> ${PACKAGE_NAME}_${UBUNTU_VERSION}.xml'
                            archiveArtifacts artifacts: '*.xml', defaultExcludes: false
                        }
                    }
                }
            }                
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
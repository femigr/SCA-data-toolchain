pipeline {
    agent any 
    parameters {
        string(name: 'PROJECT', defaultValue: '', description: 'Name of the debian package to scan or git link of the repository');
        //string(name: 'REVISION', defaultValue: '', description: 'Specific revision to checkout (for example a commit hash), leave empty to just pull the current state of the main branch');
        //string(name: 'LANGUAGE', defaultValue: 'cpp', description: 'The programming language');
        //string(name: 'BUILD_COMMAND', defaultValue: '', description: 'Command that builds the repo, leave empty to attempt auto-detection');
        //string(name: 'SOURCE_ROOT', defaultValue: '', description: 'Leave empty to stay in the root folder')
    }
    options {
        timeout(time: 15, unit: 'MINUTES', activity: true)
    }
    stages {
        stage('Get Repository') { 
            steps {
                script{
                    // check if PROJECT is a git link or a debian package name, roughly
                    if(env.PROJECT.contains("//")) {
                        sh 'git clone --progress $PROJECT'
                        env.FILENAME = env.PROJECT.split("//")[1].split("/")[2].split(".git")[0] + '.xml'
                    } else {
                        sh 'apt source $PROJECT'
                        env.FILENAME = env.PROJECT + '.xml'
                    }
                }
            }
        }
        stage('cppCheck'){
            steps{
                sh 'ls'
                sh 'cppcheck --xml ./ 2> ${FILENAME}'
                archiveArtifacts artifacts: '*.xml', defaultExcludes: false
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}